{"id":1193182956,"question_id":155,"lang":"python","lang_name":"Python","time":"10Â months","timestamp":1709522344,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1193182956/","is_pending":"Not Pending","title":"Min Stack","memory":"15 MB","code":"class MinStack(object):\n\n    def __init__(self):\n        self.min_ele = -1\n        self.stack = []\n        \n\n    def push(self, val):\n        if not self.stack:\n            self.stack.append(val)\n            self.min_ele = val\n        else:\n            if val >= self.min_ele:\n                self.stack.append(val)\n            elif val < self.min_ele:\n                self.stack.append(val * 2 - self.min_ele)\n                self.min_ele = val\n\n    def pop(self):\n        if not self.stack:\n            return -1\n        else:\n            if self.stack and self.stack[-1] >= self.min_ele:\n                self.stack.pop()\n            elif self.stack and self.stack[-1] < self.min_ele:\n                self.min_ele = 2 * self.min_ele - self.stack[-1]\n                self.stack.pop()\n\n    def top(self):\n        if not self.stack:\n            return -1\n        else:\n            if self.stack and self.stack[-1] >= self.min_ele:\n                return self.stack[-1]\n            elif self.stack and self.stack[-1] < self.min_ele:\n                return self.min_ele\n        \n\n    def getMin(self):\n        if not self.stack:\n            return -1\n        return self.min_ele\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}