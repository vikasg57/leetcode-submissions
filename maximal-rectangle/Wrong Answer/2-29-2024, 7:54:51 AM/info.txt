{"id":1189246323,"question_id":85,"lang":"python","lang_name":"Python","time":"10Â months","timestamp":1709173491,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1189246323/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"N/A","code":"class Solution(object):\n    def maximalRectangle(self, matrix):\n        vector = []\n\n        for j in range(0, len(matrix[0])):\n            vector.append(int(matrix[0][j]))\n        area = self.largestRectangleArea(vector)\n        if len(matrix) >1:\n            for i in range(1, len(matrix)):\n                for j in range(0, len(matrix[i])):\n                    if matrix[i][j] == 0:\n                        vector[j] = 0\n                    else:\n                        vector[j] = int(vector[j]) + int(matrix[i][j])\n                area = max(area, self.largestRectangleArea(vector))\n        return area\n\n    def largestRectangleArea(self, heights):\n        #firstly we will find nearest smaller element at right\n        # for finding nsr we will start from right (end of list means reverse traversal)\n        stack = []\n        right = []\n        area = []\n        pseudo_ind = len(heights)\n        for i in range(len(heights) -1, -1, -1):\n            if not stack:\n                right.append(pseudo_ind)\n            elif stack and stack[-1][0] < heights[i]:\n                right.append(stack[-1][1])\n            elif stack and stack[-1][0] >= heights[i]:\n                while stack and stack[-1][0] >= heights[i]:\n                    stack.pop()\n                if stack:\n                    right.append(stack[-1][1])\n                else:\n                    right.append(pseudo_ind)\n            stack.append((heights[i],i))\n        right.reverse()\n\n        # then we will find nearest smaller element at left\n        # for finding nsl we will start from left means from zero\n        stack = []\n        left = []\n        pseudo_ind = -1\n        for i in range(0, len(heights)):\n            if not stack:\n                left.append(pseudo_ind)\n            elif stack and stack[-1][0] < heights[i]:\n                left.append(stack[-1][1])\n            elif stack and stack[-1][0] >= heights[i]:\n                while stack and stack[-1][0] >= heights[i]:\n                    stack.pop()\n                if stack:\n                    left.append(stack[-1][1])\n                else:\n                    left.append(pseudo_ind)\n            stack.append((heights[i],i))\n        \n        for i in range(len(heights)):\n            area_of_element = right[i] - left[i] - 1\n            area.append(area_of_element * heights[i])\n\n        return max(area)\n","compare_result":"11111111011111111111111101000000000110000000000100100001100000000001000010","title_slug":"maximal-rectangle","has_notes":false,"flag_type":1}