{"id":1185443963,"question_id":84,"lang":"python","lang_name":"Python","time":"10 months, 1 week","timestamp":1708835815,"status":10,"status_display":"Accepted","runtime":"1038 ms","url":"/submissions/detail/1185443963/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"28 MB","code":"class Solution(object):\n    def largestRectangleArea(self, heights):\n\n        #firstly we will find nearest smaller element at right\n        # for finding nsr we will start from right (end of list meanse reverse traversal)\n        stack = []\n        right = []\n        area = []\n        pseudo_ind = len(heights)\n        for i in range(len(heights) -1, -1, -1):\n            if not stack:\n                right.append(pseudo_ind)\n            elif stack and stack[-1][0] < heights[i]:\n                right.append(stack[-1][1])\n            elif stack and stack[-1][0] >= heights[i]:\n                while stack and stack[-1][0] >= heights[i]:\n                    stack.pop()\n                if stack:\n                    right.append(stack[-1][1])\n                else:\n                    right.append(pseudo_ind)\n            stack.append((heights[i],i))\n        right.reverse()\n\n        # then we will find nearest smaller element at left\n        # for finding nsl we will start from left means from zero\n        stack = []\n        left = []\n        pseudo_ind = -1\n        for i in range(0, len(heights)):\n            if not stack:\n                left.append(pseudo_ind)\n            elif stack and stack[-1][0] < heights[i]:\n                left.append(stack[-1][1])\n            elif stack and stack[-1][0] >= heights[i]:\n                while stack and stack[-1][0] >= heights[i]:\n                    stack.pop()\n                if stack:\n                    left.append(stack[-1][1])\n                else:\n                    left.append(pseudo_ind)\n            stack.append((heights[i],i))\n        \n        for i in range(len(heights)):\n            area_of_element = right[i] - left[i] - 1\n            area.append(area_of_element * heights[i])\n\n        return max(area)\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}